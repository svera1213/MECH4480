"""
Template input file for HX_solver.py
""" 

# set model parameters
"""
Set parameters that define model conditions (optional)
mdata.Pinf     - (defualt = 0 Pa)        sets P-infinity used in calculations
mdata.rho      - (default = 1.225 kg/s)  sets density used for calculations
mdata.Uinf     - (default = np.nan m/s)      sets U-infinity used in calculations. 
                        If NaN this will be calculated automatically. 
"""
mdata.name = 'Vortex + Uniform Flow adjacent to a wall'
mdata.dimensions = 2

# Define the Building Blocks 
"""
The following is a short summary of the supported components. See the User-Guide 
for more detailed instructions and detailed definition.

A = UniformFlow(Vx,Vy,label='UFlow1')
--> creates an uniform with velocity magnitude and direction defined by the 
        x and y components Vx and Vy

B = Vortex(Cx,Cy,K=K,label='Vortex1')
--> creates a irrotational vortex located at (Cx, Cy) with a strength 
        K = Gamma / (2 * pi). A positive Gamma results in a vortex rotating in 
        the anticlockwise direction.

B = Vortex(Cx,Cy,Gamma=Gamma,label='Vortex1')
--> creates an irrotational vortex located at (Cx, Cy) with a strength Gamma. A 
        positive K results in a vortex rotating in the anticlockwise direction.

C = Source(Cx,Cy,m,label='Source1')
--> creates a source/sink located at (Cx,Cy). m is the mass flow rate (per unit 
        depth) coming out of the source. Use +ve m for source and -ve m for sinks

D = Doublet(Cx,Cy,R,Uinf,label='Doublet1')
--> creates a doublet (co-located source and sink) located at (Cx, Cy). R sets 
        the radius of the enclosing streamline that is generated. When used in 
        conjunction with a uniform flow to show the flow around a cylinder, set 
        Ux and Uy to match the x and y components of the uniform flow.

E = User_Defined(Cx,Cy,n,label='user1')
--> Secret. Try it out and see if you can work out what it is.  

"""

from Airfoil_profileV2 import test_run

Gamma, X_v, Y_v, X_c, Y_c = test_run()


# Uniform Flows  
A1 = UniformFlow(10.,0.)

#X_v = [0.012806534375774954, 0.0068896206844692052, 0.034476091652915306, 0.024612373527817175, 0.055413033192784664, 0.043067742108436141, 0.076032280673204861, 0.061840804748504279, 0.096455461090849598, 0.080809934451347848, 0.11673892565705357, 0.099918780005632202, 0.13691459245019405, 0.11913542333298004, 0.15700282550216099, 0.13843950040150138, 0.17701770105616102, 0.15781693496798974, 0.196969530130466, 0.17725741601417302, 0.21686620524218467, 0.19675305102294269, 0.23671397895660254, 0.21629758742901314, 0.25651794236780018, 0.23588593413830383, 0.27628233381177347, 0.25551385281481886, 0.29601074609649669, 0.27517775065058392, 0.3157062702688021, 0.29487453659876689, 0.33537159816992523, 0.31460151881813214, 0.35500909735967051, 0.33435632974887514, 0.37462086699763975, 0.35413687023139417, 0.39420878028282313, 0.37394126706669917, 0.4137745172039804, 0.39376784026603029, 0.43331959017469518, 0.41361507741580367, 0.45284536435595762, 0.4334816133550296, 0.47235307395292525, 0.45336621387855036, 0.49184383541969201, 0.47326776253227187, 0.51131865826020828, 0.49318524981224393, 0.53077845393950418, 0.51311776425343636, 0.55022404329424834, 0.53306448501918047, 0.56965616274042197, 0.55302467569349534, 0.58907546950847434, 0.57299767904593102, 0.60848254608594121, 0.59298291258895264, 0.62787790400940802, 0.6129798647859741, 0.64726198711863692, 0.63298809179723348, 0.66663517436325137, 0.65300721467310752, 0.68599778223495311, 0.67303691692189405, 0.70535006688458513, 0.69307694239275008, 0.72469222597255645, 0.71312709342526726, 0.74402440029256067, 0.7331872292257513, 0.7633466752016409, 0.75325726443715957, 0.78265908188409983, 0.77333716787518891, 0.80196159847226123, 0.79342696140751579, 0.82125415104341049, 0.81352671895685502, 0.84053661450923622, 0.83363656561151733, 0.85980881341160997, 0.85375667682963208, 0.87907052263648167, 0.87388727772524866, 0.89832146805596191, 0.89402864242625668, 0.91756132710722693, 0.91418109349548016, 0.93678972931567983, 0.93434500140751553, 0.95600625676879558, 0.95452078407488783, 0.97521044454621175, 0.97470890641796015]
#Y_v =[0.015041760746205404, -0.018514724299544011, 0.022760517308343435, -0.033179407968359255, 0.026324403558930662, -0.043689221325623695, 0.028086557265963305, -0.052397302139333551, 0.028736759404451646, -0.059993431384499106, 0.02859459357475163, -0.066797192661476296, 0.02784107619448134, -0.072989602387883226, 0.026591697427472395, -0.078686150727551502, 0.024926287615910838, -0.083966668022667154, 0.022903323450264301, -0.088889630963697827, 0.020567565619321805, -0.093499800239432551, 0.017954474182913412, -0.097832635909701371, 0.015092922170340167, -0.10191701100380533, 0.012006946379481201, -0.10577696231962358, 0.0087169226368819797, -0.10943286568370156, 0.0052403811402459283, -0.11290225129374273, 0.0015925880798335484, -0.11620038534000757, -0.0022130294454790686, -0.11934069492137217, -0.0061645665100058394, -0.12233508496352259, -0.010251399674370117, -0.12519417890583556, -0.014464001248860776, -0.12792750443802212, -0.01879379390981669, -0.13054363888374337, -0.023233035444534887, -0.13305032445570242, -0.027774726327743471, -0.13545456067917105, -0.032412534833636139, -0.13776267927995556, -0.0371407357808132, -0.13998040543945575, -0.041954159994220017, -0.14211290833272616, -0.046848152277780011, -0.14416484315584338, -0.051818536208929317, -0.14614038633137127, -0.056861584448566378, -0.14804326519841141, -0.061973993545722965, -0.14987678320793202, -0.067152862432259791, -0.15164384142807244, -0.072395673967803637, -0.15334695699920581, -0.077700279022245439, -0.15498827905144122, -0.083064882681948865, -0.15656960249841501, -0.088488032243295892, -0.15809238004374515, -0.093968606718403888, -0.15955773267531437, -0.099505807626556336, -0.16096645887383917, -0.10509915088390735, -0.16231904272316533, -0.11074845963548668, -0.16361566107826325, -0.11645385789905034, -0.16485618992137685, -0.12221576491114569, -0.16604021001595867, -0.12803489008283775, -0.1671670119509438, -0.13391222848662207, -0.16823560065383672, -0.13984905680771731, -0.16924469943941867, -0.14584692970263829, -0.17019275365117492, -0.15190767651606532, -0.17107793394442514, -0.15803339831384189, -0.17189813925332575, -0.16422646519567374, -0.17265099947817109, -0.17048951385596178, -0.17333387792456029] 
#Gamma = [ 0.87224857,  0.17856112,  0.54114981, -0.04337378,  0.46011294, -0.09618147, 0.41994822, -0.12194952,  0.39473665, -0.13791803,  0.37686918, -0.14908059, 0.36323538, -0.15746205,  0.35230339, -0.16405731,  0.3432218,  -0.16942094, 0.33547538, -0.17389108,  0.32873206, -0.17768823,  0.32276718, -0.18096386, 0.31742287, -0.18382653,  0.31258466, -0.18635676,  0.30816746, -0.18861605, 0.30410671, -0.19065257,  0.30035251, -0.19250495,  0.29686581, -0.19420474, 0.29361568, -0.19577827,  0.2905774,  -0.19724785,  0.28773114, -0.19863279, 0.28506094, -0.19995006,  0.28255406, -0.2012149,   0.28020036, -0.20244125, 0.27799203, -0.20364211,  0.2759233,  -0.20482998,  0.27399028, -0.20601707, 0.27219094, -0.20721572,  0.27052514, -0.20843869,  0.26899474, -0.20969959, 0.26760389, -0.21101334,  0.26635941, -0.21239675,  0.26527139, -0.21386929, 0.264354,   -0.21545408,  0.26362678, -0.21717928,  0.26311638, -0.21908002, 0.26285915, -0.22120117,  0.26290512, -0.22360144,  0.26332397, -0.22635963, 0.26421456, -0.22958441,  0.26572052, -0.23343032,  0.26805693, -0.23812494, 0.27155839, -0.24401777,  0.27677165, -0.25167406,  0.28465212, -0.26207349, 0.29704509, -0.27709613,  0.31814957, -0.30099992,  0.36048175, -0.34642627, 0.48115192, -0.47071506,  1.36956681, -1.36320321]
#
#X_c = [0.0, 0.023793865007807936, 0.015598445112680385, 0.044997190899272253, 0.033787429341704388, 0.065752351869161618, 0.052424578492303336, 0.08626403755977835, 0.071305202922174932, 0.1066122989268467, 0.090349251675594905, 0.12683877147155453, 0.10951508925137537, 0.14696864861105818, 0.12877752223236011, 0.16701871978689933, 0.14811976117700723, 0.18700095747210055, 0.16752983361229434, 0.20692433937311738, 0.18699876183176584, 0.22679586359531861, 0.20651954773005293, 0.24662115487666433, 0.22608656656919549, 0.26640484683401849, 0.24569518473232971, 0.28615083376172595, 0.26534150792511063, 0.30586244258822476, 0.28502220921909999, 0.32554255391215692, 0.30473440801565621, 0.34519368941788997, 0.32447558263041154, 0.36481807642556385, 0.34424350574322593, 0.3844176964867595, 0.36403619580251856, 0.40399432259601925, 0.38385187981374719, 0.42354954811739448, 0.40368896441286023, 0.44308480957485186, 0.42354601307589124, 0.46260140482620699, 0.44342172794502438, 0.48210050771453578, 0.46331493517718386, 0.50158317999724, 0.48322457301496796, 0.5210503811466104, 0.50314968198608601, 0.54050297646844891, 0.52308939678473576, 0.55994174387864271, 0.54304293949503046, 0.57936737959926687, 0.56300961389489435, 0.59878050297760033, 0.58298880063704916, 0.61818166058767632, 0.60297995314746167, 0.63757132974076147, 0.62298259411486478, 0.65694992150565168, 0.64299631247046307, 0.67631778331993075, 0.66302076077667227, 0.69567520125793048, 0.68305565295916082, 0.7150224020089907, 0.70310076232858887, 0.73435955461000502, 0.72315591984806282, 0.75368677196855582, 0.74322101261000029, 0.77300411220676679, 0.76329598249227781, 0.79231157985100931, 0.78338082496852357, 0.81160912688854037, 0.803475588051481, 0.83089665370881871, 0.82358037135169071, 0.85017400994452463, 0.84369532523647306, 0.86944099522503793, 0.86382065007644826, 0.8886973598532647, 0.88395659556870976, 0.90794280541513062, 0.90410346012733211, 0.92717698532975246, 0.92426159033319877, 0.94639950534719441, 0.94443138043624486, 0.96560992399978962, 0.96461327190413815, 0.98480775301220802] 
#Y_c = [0.0, 0.019766304374346465, -0.026712231481023679, 0.024840931355164839, -0.038732785568519265, 0.027373888764064838, -0.048211670084096478, 0.028526029248099584, -0.056309737674808437, 0.028751344337110983, -0.063480979870497056, 0.028285960692036677, -0.069961523332099956, 0.027272757281569002, -0.075894247028309506, 0.025806951760285538, -0.081374368613703243, 0.023956443396774378, -0.086469787356869304, 0.02177214729443893, -0.09123141836121107, 0.019293751681029106, -0.095698949854478452, 0.016553156030678022, -0.099904281310804588, 0.01357663889046485, -0.10387369127726861, 0.010386285901108253, -0.10762926539458925, 0.0070009650113746352, -0.11118987161153283, 0.003437012907970903, -0.11457184661480632, -0.00029126922639406, -0.11778949158711857, -0.0041712496315036152, -0.12085543828868622, -0.0081916903699026655, -0.12378092465696439, -0.012342536289877304, -0.12657600584366696, -0.016614750974850351, -0.12924971826537113, -0.021000187492566706, -0.13181020885433198, -0.025491485325591305, -0.13426483812798459, -0.030081987279029755, -0.13662026328122337, -0.034765671827431927, -0.1388825058394984, -0.039537097533039703, -0.14105700724056786, -0.044391357002788914, -0.14314867487749583, -0.049324038456453154, -0.14516192053050886, -0.054331193422432804, -0.14710069267120635, -0.059409309407767369, -0.14896850379254903, -0.064555286637078643, -0.15076845366991498, -0.069766418143656778, -0.15250324927001405, -0.075040372640514996, -0.15417522187983304, -0.080375179711198536, -0.15578634191582674, -0.085769216947551172, -0.15733823178615131, -0.09122119873044196, -0.15883217710993772, -0.096730166404008555, -0.16026913654304831, -0.10229547963753194, -0.16164975041620216, -0.10791680880406991, -0.16297434835634142, -0.1135941282332924, -0.16424295603379613, -0.11932771021899824, -0.16545530115476753, -0.12511811968063652, -0.16661081879980644, -0.13096620939365627, -0.16770865619346387, -0.13687311571631183, -0.16874767697748555, -0.14284025475119239, -0.16972646504928224, -0.14886931888861235, -0.17064332801853946, -0.15496227368643489, -0.17149630032739416, -0.16112135504715053, -0.17228314607335571, -0.16734906665831592, -0.1730013615688675, -0.17364817766693036] 

N = 100
X = []
X.append(A1)
for i in range(N):
    X.append(Vortex(X_v[i],Y_v[i],Gamma = Gamma[i]))

# Define how the solution will be visualised. 
"""
By use the following settings to adjust the visaulisation.
---- Define plotting Window -----
visual.xmin     - (default = -1.) sets x_min for plots
visual.xmax     - (default =  1.) sets x_max for plots
visual.ymin     - (default = -1.) sets y_min for plots
visual.ymax     - (default =  1.) sets y_max for plots
visual.Nx       - (default = 50) number of points used for discretisation 
                                in x-direction
visual.Ny       - (default = 50) number of points used for discretisation 
                                in x-direction
visual.subplot  - (default = 0)  0 - all individual graphs; 1 - subplots in 
                                single figure 

---- Define what is plotted ----
plot.psi(levels=20) - plots 'real' streamlines, contours of psi. Use levels to 
                        set number of contours.
plot.psi_magU(min=[], max=[], levels=20) - create contour plot of velocity 
                        magnitude with overlaid stream functions. Use min and 
                        max to specify range and levels sets numbers of contours.
plot.vectors()  - plots nice looking streamlines. Note these are not 
                        euqipotentials of psi.
plot.vectors_magU(min=[], max=[], levels=20) - create contour plot of velocity 
                        magnitude with overlaid velocity vectors. Use min and 
                        max to specify range and levels sets numbers of contours.
plot.magU(min=[], max=[], levels=20) - create contour plot of velocity magnitude. 
                        Use min and max to specify range and levels sets numbers 
                        of contours.
plot.U(min=[], max=[], levels=20) - create contour plot of U velocity. Use min 
                        and max to specify range and levels sets numbers of contours.
plot.V(min=[], max=[], levels=20) - create contour plot of V velocity. Use min 
                        and max to specify range and levels sets numbers of contours.
plot.P(P_inf=0., rho=1.225, min=[], max=[], levels=20) - create contour plot of 
                        pressure, using P_inf and rho to perform the calculation. 
                        P = P_inf - 1/2 * rho * magU**2. Use min and max to 
                        specify range and levels sets numbers of contours.
plot.Cp(U_inf=1., rho=1.225, min=[], max=[]) - create contorus of pressure 
                        coefficient Cp, using U_inf and rho to perform the 
                        calculation.
                        Cp = P / ( 1/2 * rho * U_inf**2 )
"""

visual.xmin=-1.
visual.xmax =2.
visual.Nx = 200
visual.Ny = 200
visual.subplot = 0

plot.psi(levels = 50)
plot.vectors_magU(min=0., max=20.)
plot.P(min=-200, max=0)


# Define what is printed to screen
"""
---- Define what is displayed ----
screen.variables(['Psi','magU','U','V','P','Cp'])  - provide list of parameters that 
                        will be evaluated. (default ['Psi','P', 'magU'])
screen.locations([ [x0,y0], [x1,y1], [x2,y2], ...] ) - provide list of points 
                        where to evaluate data
screen.Lineval([x0,y0], [x1,y1], N=5)     - evaluates conditions at N equally 
                        spaced points between (x0,y0) and (x1,y1)
"""

screen.variables(['Psi', 'U', 'V', 'P']) 
screen.Lineval([-2.0,0.0], [2.0,0.0], N=19) 

loc_top = []
loc_bottom = []
for i in range(len(X_c)):
    if i == 0:
        loc_top.append([X_c[i],Y_c[i]])        
        loc_bottom.append([X_c[i],Y_c[i]])        
    elif i % 2 == 0:
        loc_bottom.append([X_c[i],Y_c[i]])
    else:
        loc_top.append([X_c[i],Y_c[i]])    

screen.locations(loc_top)
screen.locations(loc_bottom)